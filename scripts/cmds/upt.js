const os = require("os");
const startTime = new Date(); // ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü

module.exports = {
  config: {
    name: "uptime",
    aliases: ["up","upt"],
    version: "1.0.6",
    author: "SHIFAT",
    countDown: 5,
    role: 0,
    shortDescription: "‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Ü‡¶™‡¶ü‡¶æ‡¶á‡¶Æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
    longDescription: "‡¶¨‡¶ü ‡¶ï‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶ß‡¶∞‡ßá ‡¶ö‡¶≤‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§",
    category: "system"
  },

  onStart: async function ({ api, event }) {
    try {
      // ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
      const sent = await api.sendMessage("|  ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥ú·¥ò·¥õ…™·¥ç·¥á ·¥Ä…¥·¥Ö s ès·¥õ·¥á·¥ç ·¥Ö·¥Ä·¥õ·¥Ä...", event.threadID);
      const messageID = sent.messageID;

      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™‡¶ó‡ßÅ‡¶≤‡ßã
      const animationSteps = [
        { text: "[‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 17%\n·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢ …™s s·¥õ·¥Ä Ä·¥õ…™…¥…¢....", delay: 700 },
        { text: "[‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 48%\n·¥ú·¥ò·¥õ…™·¥ç·¥á …™s  ô·¥á…™…¥…¢ ·¥Ñ·¥Ä ü·¥Ñ·¥ú ü·¥Ä·¥õ·¥á·¥Ö...", delay: 700 },
        { text: "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë] 66%\n·¥õ ú·¥á ·¥ç·¥á·¥ç·¥è Ä è ·¥Ö·¥Ä·¥õ·¥Ä …™s  ô·¥á…™…¥…¢ ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ·¥á·¥Ö...", delay: 700 },
        { text: "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 99%\n·¥á·¥†·¥á Ä è·¥õ ú…™…¥…¢ …™s  ô·¥á…™…¥…¢ ·¥ò·¥Ä·¥Ñ·¥ã·¥á·¥Ö...", delay: 800 }
      ];

      // ‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
      for (const step of animationSteps) {
        await new Promise(resolve => setTimeout(resolve, step.delay));
        try {
          await api.editMessage(step.text, messageID);
        } catch (e) {
          console.error("‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡¶ø‡¶Æ‡ßá‡¶∂‡¶® ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø:", e);
          break;
        }
      }

      // ‡¶Ü‡¶™‡¶ü‡¶æ‡¶á‡¶Æ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨
      const uptimeInSeconds = Math.floor((new Date() - startTime) / 1000);
      const days = Math.floor(uptimeInSeconds / (3600 * 24));
      const hours = Math.floor((uptimeInSeconds % (3600 * 24)) / 3600);
      const minutes = Math.floor((uptimeInSeconds % 3600) / 60);
      const secondsLeft = uptimeInSeconds % 60;
      const uptimeFormatted = `${days}d ${hours}h ${minutes}m ${secondsLeft}s`;

      // ‡¶Æ‡ßá‡¶Æ‡ßã‡¶∞‡¶ø ‡¶§‡¶•‡ßç‡¶Ø
      const totalMemoryGB = (os.totalmem() / (1024 ** 3)).toFixed(2);
      const freeMemoryGB = (os.freemem() / (1024 ** 3)).toFixed(2);
      const usedMemoryGB = (totalMemoryGB - freeMemoryGB).toFixed(2);

      // ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
      const systemInfo = `
‚ô°  ‚à©_‚à©                        ‚à©_‚à©  ‚ô°
Ôºà‚Äû‚Ä¢ ÷ä ‚Ä¢‚Äû)_ùë∫ùë∞ùíÅùëºùë≤ùë®_ (‚Äû‚Ä¢ ÷ä ‚Ä¢‚Äû)
‚ï≠‚îÄ‚à™‚à™‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚à™‚à™‚îÄ‚ü°
‚îÇ ‚îÄ‚îÄ‚îÄÍØ≠‚îÄ‚îÄ‚Éù‚Äå‚Äåùëàùëùùë° ùêºùëõùëìùëú‚îÄ‚îÄ‚îÄ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
‚îÇüçÅ ùëÖùë¢ùëõùë°ùëñùëöùëí
‚îÇ ${uptimeFormatted}
‚îÇ üçÅ ùëÄùëíùëöùëúùëüùë¶
‚îÇ ùöÉùôæùöÉùô∞ùôª: ${totalMemoryGB} GB
‚îÇ ùôµùöÅùô¥ùô¥: ${freeMemoryGB} GB
‚îÇ ùöÑùöÇùô¥ùô≥: ${usedMemoryGB} GB
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
‚îÇ     ìÜ©‚Ñ≠.ùîà.ùîí‚∏ôùîñ‚Ñå‚ÑëùîâùîÑùîóìÜ™
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü°
`;

      await new Promise(resolve => setTimeout(resolve, 1000));
      await api.editMessage(systemInfo, messageID);

    } catch (error) {
      console.error("‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:", error);
      api.sendMessage("‚ùå | ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ!", event.threadID);
    }
  }
};
